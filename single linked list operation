#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<malloc.h>
struct node
{
	int data;
	struct node *next;
};
struct node *start=NULL;
struct node *createll(struct node *);
struct node *display(struct node *);
struct node *insert_beg(struct node *);
struct node *insert_end(struct node *);
struct node *insert_before(struct node *);
struct node *insert_after(struct node *);
struct node *delete_beg(struct node *);
struct node *delete_end(struct node *);
struct node *delete_after(struct node *);
struct node *delete_before(struct node *);
struct node *delete_list(struct node *);
struct node *sort_list(struct node *);
int main()
{
	int option;
	do
	{
		printf("\n *********** Main menu **********");
		printf("\n 1. CREATE LIST ");
		printf("\n 2. DISPLAY LIST");
		printf("\n 3. INSERT BEGINNING");
		printf("\n 4. INSERT END");
		printf("\n 5. INSERT BEFORE");
		printf("\n 6. INSERT AFTER");
		printf("\n 7. DELETE BIGINNING");
		printf("\n 8. DELETE END");
		printf("\n 9 DELETE AFTER");
		printf("\n 10. DELETE BEFORE");
		printf("\n 11. DELETE LIST");
		printf("\n 12. SORT LIST");
		printf("\n 13. EXIT ");
		printf("******PLEASE CHOOSE*******");
		scanf("%d",&option);
		switch(option)
		{
			case 1: start=createll(start);
			        printf("\n Linked list cretated");
			        break;
			case 2: start=display(start);
			        break;
			case 3: start=insert_beg(start);
			        break;
			case 4: start=insert_end(start);
			        break;
			case 5: start=insert_before(start);
			        break;
			case 6: start=insert_after(start);
			        break;
			case 7: start=delete_beg(start);
			        break;
			case 8: start=delete_end(start);
			        break;
			case 9: start=delete_after(start);
			        break;
			case 10: start=delete_before(start);
			        break;
			case 11: start=delete_list(start);
			        break;
			case 12: start=sort_list(start);
			        break;
			
		}
	}while(option!=13);
		getch();
		return 0;
}
struct node *createll(struct node *start)
{
	struct node *newnode,*ptr;
	int num;
	printf("\n PRESS -1 TO END");
	printf("\n ENTER THE DATA");
	scanf("%d",&num);
	while(num!=-1)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		newnode->data=num;
		if(start==NULL)
		{
			newnode->next=NULL;
			start=newnode;
		}
		else
		{
			ptr=start;
			while(ptr->next!=NULL)
			{
			ptr=ptr->next;
		    }
		    ptr->next=newnode;
		    newnode->next=NULL;	
		}
		printf("ENTER THE DATA");
		scanf("%d",&num);	
		
	}
	return start;
}
struct node *display(struct node *start)
{
	struct node *ptr;
    if(start==NULL)
	{
	printf("List is empty");
	}
	else
	{
	ptr=start;
	while(ptr!=NULL)
	{
		printf("%d",ptr->data);
		ptr=ptr->next;
	}
	}
	return start;
	
}
struct node *insert_beg(struct node *start)
{
	struct node *newnode;
	int num;
	printf("enter the data");
	scanf("%d",&num);
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=num;
	newnode->next=NULL;
	newnode->next=start;
	start=newnode;
	return start;
}
struct node *insert_end(struct node *start)
{
	struct node *newnode,*ptr;
	int num;
	printf("enter the data");
	scanf("%d",&num);
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=num;
	newnode->next=NULL;
	ptr=start;
	while(ptr->next!=NULL)
	{
		ptr=ptr->next;
	}
	ptr->next=newnode;
	newnode->next=NULL;
	return start;
}
struct node *insert_before(struct node *start)
{
	struct node *newnode,*ptr,*preptr;
	int num,val;
	printf("enter the data");
	scanf("%d",&num);
	printf("enter the data before which");
	scanf("%d",&val);
	scanf("%d",&num);
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=num;
	newnode->next=NULL;
	ptr=start;
	while(ptr->data!=val)
	{
	preptr=ptr;
	ptr=ptr->next;
	}
	preptr->next=newnode;
	newnode->next=ptr;
	return start;
	
}
struct node *insert_after(struct node *start)
{
	struct node *newnode,*ptr,*preptr;
	int num,val;
	printf("enter the data");
	scanf("%d",&num);
	printf("enter the data before which");
	scanf("%d",&val);
	scanf("%d",&num);
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=num;
	newnode->next=NULL;
	ptr=start;
	while(preptr->data!=val)
	{
	preptr=ptr;
	ptr=ptr->next;
	}
	preptr->next=newnode;
	newnode->next=ptr;
	return start;
	
}
struct node *delete_beg(struct node *start)
{
	if(start=NULL)
	{
		printf("LIST IS EMPTY");
	}
	else
	{
	start=start->next;
    }
}
struct node *delete_end(struct node *start)
{
	if(start=NULL)
	{
		printf("LIST IS EMPTY");
	}
	struct node *ptr,*preptr;
	ptr=start;
	while(ptr->next!=NULL)
	{
		preptr=ptr;
		ptr=ptr->next;
	}
	preptr->next=NULL;
	free(ptr);
}
struct node *delete_after(struct node *start)
{
	if(start=NULL)
	{
		printf("LIST IS EMPTY");
	}
	struct node *ptr,*preptr;
	int val;
	printf("ENTER THE VALUE AFTER WHICH YIU WANT TO DELETE");
	scanf("%d",&val);
	ptr=start;
	while(preptr->data!=val)
	{
		preptr=ptr;
		ptr=ptr->next;
	}
	preptr->next=ptr->next;
	free(ptr);
	return start;
}
struct node *delete_before(struct node*start)
{
	
}
struct node *delete_list(struct node*start)
{
 struct node *ptr,*preptr;
if(start!=NULL)
 {
 	 ptr=start;	
 while(ptr!=NULL)
 {
 	free(preptr);
 	preptr=ptr;
 	ptr=ptr->next;
 }
}
 return start;
}
struct node*sort_list(struct node*start)
{
	struct node *ptr1,*ptr2;
	int temp;
	ptr1=start;
	while(ptr1->next!=NULL)
	{
		ptr2=ptr1->next;
		while(ptr2->next!=NULL)
		{
			if(ptr1->data>ptr2->data)
			{
			temp=ptr1->data;
			ptr1->data=ptr2->data;
			ptr2->data=temp;
		    }
		ptr2=ptr2->next;
		}
	ptr1=ptr1->next;
	}
return start;
}
